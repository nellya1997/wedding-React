1) Классы в React пишутся через "className" (в html - "class").
У "label" for заменяется на "htmlFor".

2) Компоненты React, как и классы, принято называть всегда с большой буквы.

3) Одиночные теги, такие как <br>, <img> и тд - должны быть закрыты в конце.
Например: <img src="./image.jpg" alt="Картинка" />

4) Все возможные ошибки пишутся в VS Code, часть из которых он может автоматически исправить (ПКМ на ошибке -
внизу fix to all)
Для этого требуется установить глобально eslint.
Пишете в консоли "npm i -g eslint" без кавычек, естественно.
флаг -g означает глобальную установку, eslint будет доступен в любом проекте при наличия файла в корневом
каталоге .eslintrc (этот файл так же кочует из проекта в проект)

5) .Makefile - управление проектом проще и удобнее.
Устанавливаете глобально make (npm i -g make)
Суть работы будет понятна, если откроете его (файл) в редакторе.

6) Запуск проекта. После клонирования репозитория следует установить все зависимости проекта, которые лежат в папке
node_modules.
Данная папка всегда находится в .gitignore, что бы не засорять ненужной информацией gitHub.
Установка зависимостей делается через команду "npm ci".
В данном проекте (у нас есть серверная часть (backend), а так же клиентская часть (frontend).
Зависимости есть и там и там, по этому я в .Makefile уже написал команду, упрощающую установку зависимостей
(что бы не бегать в консоли туда-сюда)
Устанавливаются зависимости в данном случае через "make install".
После в бекенде и фронтенде появятся папки node_modules со скаченными зависимостями.
Зависимости определяются в package.json, после установки какой-либо библиотеки в проект (без флага -g)
библиотека попадает в package.json, где и сохраняется.
Библиотеки, которые нужны для продакшена (то, что отдаем клиенту) устанавливаются просто: "npm i libname"
или "npm i --save libname", а те, которые нужны лишь для разработчиков (например, eslint, если не установлен глобально) - 
ставятся с флагом --saveDev. Если посмотрите package.json - будет понятно.

После установки зависимостей можно запускать проект.
без make:

backend: "node server.js" или "npm run start" - поднимает бекенд
frontend: фронт запускается из своей папки, по этому "cd frontend", потом "npm run start"
Если использовать npm run - третье слово он берет из package.json, там прописаны команды проекта.

с make:

из корня проекта пишем "make start-local" - запустится бекенд.
из корня проекта пишем "make start-frontend" - запустится лайв фронта (реакт).

Бекенд и фронт не работают в одной консоли, по этому без gulp придется открывать консоль два раза и держать их включенными.

7) .env
В бекенде лежит файл .env, который обязательно должен быть закрыт от посторонних глаз (естественно, с помощью .gitignore)
Именно по этому его нет в вашем репозитории, но он есть у меня :)
Там лежат все пароли, логины и тд от серверной части, например, от базы данных.
Файл скину в телегу, поменяете вашу инфу на свою.
Бекенд берет эти константы из файла по случаю и подставляет в свой код, в данном случае, опять же, в package.json
бекенда видно, как они используются. В моём случае у меня есть локальная БД и на хосте. На хосте я пишу "make start"
и сервер берет пароль от серверной БД, в локали - "make start-local" и он берет локальную бд.
Но в случае бесплатного хоста, по ftp .env не закинешь - по этому пришлось писать пароль прямо в коде, который попадает на
gitHub. В плане собственного хоста, еслественно, заливаем через ftp.

8) package.json

В каждом проекте (бекенд и фронтенд - это проекты) лежит package.json.
Проект (если у вас пустая папка) создается командой npm init. Далее отвечаете на вопросы (название проекта, например)
и он создает вам package.json. Туда уже будут сохраняться ваши зависимости.
Если не хотите отвечать на вопросы, можно использовать флаг -y (npm init -y).

9) postgreSQL у вас уже должен быть установлен, а в файле .env по моему шаблону вставлен логин-пароль-таблица.
Все нужные таблицы для работы приложения бекенд создаст сам.

